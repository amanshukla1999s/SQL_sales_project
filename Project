create database data_analyst_assignment_apnibus
create table customers (
      customer_id int not null unique,
	  name varchar(255) not null,
	  age int not null,
	  gender VARCHAR (10) CHECK (gender in ('m','f')) not null
 );

 create table products (
       product_id int not null unique,
	   name varchar(255) not null,
	   category varchar(255) not null,
	   price int 
	   );

create table sales (
       transaction_id int not null unique,
	   customer_id int not null unique,
	   product_id int not null unique,
	   date date not null ,
	   amount int not null
	   );

create table inventory (
       product_id int not null unique,
	   stock_count int not null
	   );
select * from sales

/*Load the dataset into a SQL database and examine its structure.*/
SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'sales'
ORDER BY ORDINAL_POSITION;

SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'inventory'
ORDER BY ORDINAL_POSITION;

SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'customers'
ORDER BY ORDINAL_POSITION;

SELECT *
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'products'
ORDER BY ORDINAL_POSITION;


alter table products
add foreign key (product_id) references sales(product_id)

select * from customers
where customer_id is null or name is null or age is null or gender is null

select * from products
where product_id is null or product_name is null or category is null or price is null

select * from sales 
where transaction_id is null or customer_id is null or product_id is null or date is null or quantity is null 
or amount is null

select * from inventory
where product_id is null or stock_count is null



/*Calculate the total revenue generated by the company for each product category*/

SELECT p.product_name , sum(amount) as total_sales
from sales s
 join products p on s.product_id = p.product_id
group by p.product_name


select product_id , count(*) as duplicates_values  from products
group by product_id
having count (*) > 1;

select transaction_id, count(*) as duplicates_values from sales
group by transaction_id
having count (*) >1;

select customer_id, count(*) as duplicates_values from customers
group by customer_id
having count (*) >1;



/*Determine the top 5 customers who have made the highest total purchases, considering
the customer's age and gender.*/

select top 5 c.customer_id, c.name ,c.age, c.gender ,sum(s.amount) as total_purchase
from customers c
join sales s on c.customer_id = s.customer_id
group by 
c.customer_id,
c.name,
c.age,
c.gender
order by total_purchase desc

/*Identify the most profitable product category by calculating the average revenue per unit
sold.*/

select top 1 p.category, sum(s.amount)/sum(s.quantity) as average_revenue_per_unit
from products p
join sales s on p.product_id= s.product_id
group by p.category
order by 
average_revenue_per_unit desc

/*Analyze the inventory data and identify products that need restocking (stock count less
than a specified threshold).*/

select p.product_id, p.product_name, i.stock_count
from products p
join inventory i on p.product_id = i.product_id
where i.stock_count < 50;

/*Write a SQL query to calculate the average age of customers for each product category.*/
select p.category, AVG(c.age) as average_age
from customers c
join sales s on c.customer_id= s.customer_id
join products p on s.product_id=p.product_id
group by p.category

/*Write a SQL query to retrieve the top 3 product categories that have the highest average
transaction amount.*/
select top 3 p.category ,AVG(s.amount) as average_amount
from products p
join sales s on p.product_id=s.product_id
group by p.category
order by average_amount desc
